#! /bin/bash
# vim: set ts=4 sw=4 et :

# Copyright 2018 Red Hat, Inc. and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Based on this spec:
# https://github.com/kubernetes/community/blob/master/contributors/devel/flexvolume.md

# if DEBUG, log everything to a file as we do it
DEBUG=1
DEBUGFILE='/tmp/glfs-subdir.out'
TIME=$(date +%s.%N)

RC_OK=0
RC_FAIL=1

cd "$(dirname $0)"
scriptdir="$PWD"
cd "$OLDPWD"
MOUNTPATH=${scriptdir}/.mnt
LOCKPATH=/var/lock/glfs-subvol

#-- Make an entry in the log file (if enabled)
function log() {
    if [[ $DEBUG -gt 0 ]]; then
        echo "$(date "+%b %d %T") [$TIME] $*" >> $DEBUGFILE
    fi
}

#-- Log a command, then execute it
function execute() {
    log "! $*"
    $*
}

#-- Return the result of the operation
function retResult() {
    local rc=$1
    local result="$2"
    log "< $rc $result"
    echo "$result"
    exit $rc
}

function doInit() {
    local result
    local msg=""
    mkdir -p $MOUNTPATH >& /dev/null || \
        msg="${msg} Unable to create ${MOUNTPATH}"
    mkdir -p $LOCKPATH >& /dev/null || \
        msg="${msg} Unable to create ${LOCKPATH}"
    if [[ "x$msg" != "x" ]] ; then
        result="{\"status\": \"Failure\", \"message\": \"${msg}\"}"
    else
        result="{\"status\": \"Success\", \"capabilities\": {\"attach\": false, \"selinuxRelabel\": false, \"fsGroup\": false}}"
    fi
    retResult $RC_OK "$result"
}

function mountName() {
    local vserver=$1
    local volume=$2
    local subdir=$3
    echo "$vserver-$volume" | sed 's_/_-_g'
}

function doMount() {
    # Example plugin call:
    # mount /var/lib/kubelet/pods/4a5ac08a-844b-11e7-9415-5254002b3544/volumes/rht~glfs-subvol/vol1 {"cluster":"glusterfs-cluster","dir":"00/00","kubernetes.io/fsType":"whatever","kubernetes.io/pod.name":"sleep","kubernetes.io/pod.namespace":"default","kubernetes.io/pod.uid":"4a5ac08a-844b-11e7-9415-5254002b3544","kubernetes.io/pvOrVolumeName":"vol1","kubernetes.io/readwrite":"rw","kubernetes.io/serviceAccount.name":"default","volume":"vol1"}
    # How we want to mount:
    # mount -t glusterfs -o backup-volfile-servers=192.168.121.201:192.168.121.233 192.168.121.172:/vol1 /tmp/t
    local mountdir="$1"
    local json="$2"

    local cluster=$(echo $2 | $JQ -r '.cluster')
    local volume=$(echo "$json" | $JQ -r '.volume')
    local subdir=$(echo "$json" | $JQ -r '.dir')

    # cluster is "server1:server2:..."
    # Take the 1st as volserver and rest as backups
    local volserver=$(echo $cluster | sed -r 's/^([^:]+):?(.*)/\1/')
    local backupservers=$(echo $cluster | sed -r 's/^([^:]+):?(.*)/\2/')

    local mntsuffix=$(mountName $volserver $volume $subdir)
    local mountname=${MOUNTPATH}/${mntsuffix}

    log volserver $volserver
    log backupservers $backupservers

    local msg="volserver=$volserver backup=$backupservers volume=$volume mountpoint=$mountname bindto=$mountdir"

    #-- This script can potentially be called multiple times in parallel by
    #-- different pods that are starting. We need to ensure that the big
    #-- volume is mounted atomically wrt other invocations.
    #-- See man 1 flock for this structure
    local lockfile="${LOCKPATH}/${mntsuffix}.lock"
    log "Using lockfile: $lockfile"
    ( flock 9 || exit 99
        # if main vol not mounted, we need to mount it
        mountpoint -q $mountname
        if [[ $? != 0 ]]; then
            mkdir -p $mountname
            execute mount -t glusterfs -o backup-volfile-servers=${backupservers} ${volserver}:/${volume} ${mountname}
        fi
        # bind must also be protected to ensure nobody unmounts before we
        # can bind
        if [[ $? == 0 ]]; then
            execute mount --bind ${mountname}/${subdir} ${mountdir}
        fi
        # force unlock due to fork of mount process
        flock -u -n 9
    ) 9>> ${lockfile}
    if [[ $? == 99 ]]; then
        log "flock of $lockfile failed."
    fi

    mountpoint -q ${mountdir}
    if [[ $? == 0 ]]; then
        local result="{\"status\": \"Success\", \"message\": \"$msg\"}"
        retResult $RC_OK "$result"
    else
        local result="{\"status\": \"Failure\", \"message\": \"$msg\"}"
        retResult $RC_FAIL "$result"
    fi
}

function doUnmount() {
    # unmount /var/lib/kubelet/pods/79cd720f-868e-11e7-b571-5254002b3544/volumes/rht~glfs-subvol/vol1
    local mountdir=$1
    local msg="Unmounting from ${mountdir}"

    mountpoint -q ${mountdir}
    if [[ $? != 0 ]]; then
        result="{\"status\": \"Success\", \"message\": \"Was not mounted.\"}"
        retResult $RC_OK "$result"
    fi

    # The actual gluster mount (device portion)
    local gdevice=$(grep "$mountdir" /proc/mounts | awk '{ print $1 }')
    # The directory holding the main volume mountpoint
    local gdevicedir=$(grep "$gdevice" /proc/mounts | grep "$MOUNTPATH" | awk '{ print $2 }')
    # The mount-specific suffix of the path... to match mntsuffix in doMount()
    local mntsuffix=$(echo "$gdevicedir" | sed -r "s_${MOUNTPATH}/__")
    log "gdevice=$gdevice"
    log "gdevicedir=$gdevicedir"
    log "mntsuffix=$mntsuffix"

    local result=""
    local rc=""
    execute umount ${mountdir}
    if [[ $? == 0 ]]; then
        result="{\"status\": \"Success\", \"message\": \"$msg\"}"
        rc=$RC_OK
    else
        result="{\"status\": \"Failure\", \"message\": \"$msg\"}"
        rc=$RC_FAIL
    fi

    # Try to be a good citizen and clean up after ourselves...
    # If we were the last user of the big volume, unmount it.
    # Note, we must use the same lock here as we do for mounting.
    local lockfile="${LOCKPATH}/${mntsuffix}.lock"
    log "Using lockfile: $lockfile"
    ( flock 9 || exit 99
        local mcount=$(grep $gdevice /proc/mounts | wc -l)
        log "$gdevice is mounted $mcount times"
        if [[ $mcount -eq 1 ]]; then
            # We were the last, only the main one remains
            log "We were last user of $gdevice; unmounting it."
            execute umount $gdevicedir
            execute rmdir $gdevicedir
            # Unfortunately, we need to leave the .lock file or we lose
            # protection
        fi
    ) 9>> ${lockfile}
    if [[ $? == 99 ]]; then
        log "flock of $lockfile failed."
    fi

    retResult $rc "$result"
}


#-- make sure jq is installed
JQ=$(which jq 2> /dev/null || echo "$scriptdir/.bin/jq")
if [[ $? -ne 0 || ! -x ${JQ} ]]; then
    rStatus=$S_FAILURE
    rMessage="Unable to find 'jq' in PATH. Please install jq."
    retResult
fi
which flock >& /dev/null
if [[ $? -ne 0 ]]; then
    rStatus=$S_FAILURE
    rMessage="Unable to find 'flock' in PATH. Please install flock."
    retResult
fi

log "> $*"
cmd=$1
shift
case $cmd in
init)
    doInit $*
    ;;
mount)
    doMount $*
    ;;
unmount)
    doUnmount $*
    ;;
*)
    result="{\"status\": \"Not supported\", \"message\": \"$cmd is not supported\"}"
    retResult $RC_OK "$result"
    ;;
esac
